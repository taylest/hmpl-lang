import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as l,k as n,l as e,m as t,a as i,n as r,o as c}from"./app-CRWUjIol.js";const d={};function u(m,s){const a=r("RouteLink");return c(),p("div",null,[s[6]||(s[6]=l("h1",{id:"getting-started",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#getting-started"},[l("span",null,"Getting started")])],-1)),l("p",null,[s[1]||(s[1]=n("After installation using any convenient method described in ")),e(a,{to:"/installation.html"},{default:t(()=>s[0]||(s[0]=[n("Installation")])),_:1}),s[2]||(s[2]=n(", you can start working with the server in the following way:"))]),s[7]||(s[7]=i(`<div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> src</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;https://unpkg.com/json5/dist/index.js&quot;</span><span style="color:#24292EFF;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#6F42C1;"> src</span><span style="color:#D32F2F;">=</span><span style="color:#22863A;">&quot;https://unpkg.com/hmpl-js/dist/hmpl.min.js&quot;</span><span style="color:#24292EFF;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292EFF;">&gt;</span></span>
<span class="line"><span style="color:#D32F2F;">  const</span><span style="color:#1976D2;"> templateFn</span><span style="color:#D32F2F;"> =</span><span style="color:#6F42C1;"> compile</span><span style="color:#24292EFF;">(</span></span>
<span class="line"><span style="color:#22863A;">    \`{ </span></span>
<span class="line"><span style="color:#22863A;">       {</span></span>
<span class="line"><span style="color:#22863A;">         &quot;src&quot;:&quot;/api/test&quot; </span></span>
<span class="line"><span style="color:#22863A;">       } </span></span>
<span class="line"><span style="color:#22863A;">     }\`</span></span>
<span class="line"><span style="color:#24292EFF;">  );</span></span>
<span class="line"><span style="color:#D32F2F;">  const</span><span style="color:#1976D2;"> elementObj</span><span style="color:#D32F2F;"> =</span><span style="color:#6F42C1;"> templateFn</span><span style="color:#24292EFF;">();</span></span>
<span class="line"><span style="color:#24292EFF;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292EFF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or, if you need to work with hmpl as a module, there is a list of imported functions, such as <code>compile</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#ffffff;color:#24292eff;"><pre class="shiki min-light vp-code"><code><span class="line"><span style="color:#D32F2F;">import</span><span style="color:#24292EFF;"> { compile } </span><span style="color:#D32F2F;">from</span><span style="color:#22863A;"> &quot;hmpl-js&quot;</span><span style="color:#24292EFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D32F2F;">const</span><span style="color:#1976D2;"> templateFn</span><span style="color:#D32F2F;"> =</span><span style="color:#6F42C1;"> compile</span><span style="color:#24292EFF;">(</span></span>
<span class="line"><span style="color:#22863A;">  \`{ </span></span>
<span class="line"><span style="color:#22863A;">     {</span></span>
<span class="line"><span style="color:#22863A;">       &quot;src&quot;:&quot;/api/test&quot; </span></span>
<span class="line"><span style="color:#22863A;">     } </span></span>
<span class="line"><span style="color:#22863A;">   }\`</span></span>
<span class="line"><span style="color:#24292EFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D32F2F;">const</span><span style="color:#1976D2;"> elementObj</span><span style="color:#D32F2F;"> =</span><span style="color:#6F42C1;"> templateFn</span><span style="color:#24292EFF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These will be the two main ways to interact with the server. In future versions, the functionality will be expanded, but the methods themselves will not change.</p>`,4)),l("p",null,[s[4]||(s[4]=n("Also, to work with the module, you should set up a server. You can see how to do this on the ")),e(a,{to:"/server-configuration.html"},{default:t(()=>s[3]||(s[3]=[n("Server Configuration")])),_:1}),s[5]||(s[5]=n(" page."))])])}const F=o(d,[["render",u],["__file","getting-started.html.vue"]]),g=JSON.parse('{"path":"/getting-started.html","title":"Getting started","lang":"en-US","frontmatter":{},"headers":[],"git":{},"readingTime":{"minutes":0.44,"words":133},"filePathRelative":"getting-started.md"}');export{F as comp,g as data};
